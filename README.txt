# W3 Project - Building mySQL Data-base

![portada](https://github.com/CharlyKill7/Database-Project/blob/main/images/videoclub.jpg)

## ‚õìÔ∏è √çndice

1.[‚úçÔ∏è Descripci√≥n](#descripci√≥n)\
2.[ü§ì An√°lisis general y limpieza](#an√°lisis)\
3.[üóÇÔ∏è Database](#database)\
4.[üß¨ Transformaci√≥n](#transformaci√≥n)\
5.[üìä BONUS: Consultas](#consultas)


<a name="descripci√≥n"/>

## ‚úçÔ∏è Descripci√≥n

En este proyecto tenemos que limpiar siete .csv provenientes de un negocio de videoclub, y adaptar las tablas para su exportaci√≥n a MySQL, con el fin de generar una nueva base de datos mucho m√°s √≥ptima.

**Las tablas que tenemos inicialmente:**

<details>
<summary>FILM</summary>
<br>

 12 columnas describiendo los atributos m√°s importantes de cada CD, desde el nombre de la pel√≠cula, hasta el lenguaje, el contenido adicional y los costes de alquiler.
 
![films](https://github.com/CharlyKill7/Database-Project/blob/main/images/films.png)

</details>

<details>
<summary>ACTORS</summary>
<br>

ID del actor, nombres y apellidos de los actores.
<br>
<br>
![Actors](https://github.com/CharlyKill7/Database-Project/blob/main/images/Actors.png)

</details>

<details>
<summary>CATEGORY</summary>
<br>

ID de categoria, nombre de categoria (comedia, aventura, romance)
<br>
<br>
![category](https://github.com/CharlyKill7/Database-Project/blob/main/images/category.png)

</details>

<details>
<summary>INVENTORY</summary>
<br>

ID de inventario, ID de pelicula, ID Tienda
<br>
<br>
![inventory](https://github.com/CharlyKill7/Database-Project/blob/main/images/inventory.png)

</details>

<details>
<summary>LANGUAGE</summary>
<br>

ID de lenguaje, nombre de lenguaje (Ingles, Italiano, etc)
<br>
<br>
![language](https://github.com/CharlyKill7/Database-Project/blob/main/images/language.png)

</details>

<details>
<summary>OLD_HDD</summary>
<br>

Nombre y apellido de los actores, ID de inventario, titulos de peliculas donde aparece el respectivo actor o actriz
<br>
<br>
![oldhdd](https://github.com/CharlyKill7/Database-Project/blob/main/images/oldhdd.png)

</details>

<details>
<summary>RENTAL</summary>
<br>

ID de alquiler, fecha de alquiler, fecha de retorno, ID de inventario, ID de cliente, ID del staff
<br>
<br>

![rental](https://github.com/CharlyKill7/Database-Project/blob/main/images/rental.png)

</details>

 ### Objetivo:
 
Nuestro objetivo es construir y proporcionar al cliente una base de datos consistente pero sencilla de manejar, intentando que las diferentes tablas finales se correspondan con las fichas operativas del negocio. As√≠, seg√∫n la parcela de actividad que se est√© realizando, el personal encargado podr√° rellenar todos los datos de la misma en una √∫nica tabla.


Gracias a las relaciones establecidas entre las tablas, el cliente podr√° ejecutar una serie de consultas para obtener informaci√≥n relevante y actualizada del videoclub.
 
 
 <a name="an√°lisis"/>
 
## ü§ì An√°lisis general y limpieza

En primer lugar hemos realizado un ejercicio anal√≠tico de cada uno de los siete CSV que nos han proporcionado utilizando las t√©cnicas m√°s comunes como son `.head`,`.tail`,`.info`, `.shape`, `.columns` y `.value_counts`  para obtener informaci√≥n general de cada CSV. El objetivo de esta tarea consiste en verificar que las columnas est√©n limpias, tengan sentido, y encontrar inconsistencias. Durante este proceso, encontramos las siguientes incongruencias:

<details>
<summary>¬øACTRIZ DUPLICADA?</summary>
<br>

 ![susan](https://github.com/CharlyKill7/Database-Project/blob/main/images/Susandavis.png)

</details>

<details>
<summary>¬øRELEASE DATE INCORRECTO?</summary>
<br>

Notamos que la columna **release_year**, la fecha de estreno de las pel√≠culas, indica **2006** para todas las pelis.
<br>
Pero en las fechas de los alquileres: 
```
year = []
for i in ren.rental_date:
    year.append(i[0:4])
set(year) 
```
**2005**
<br>
<br>
Al ser todos los alquileres previos a 2006, concluimos que la columna **release_year** est√° incorrectamente introducida y por tanto la vaciamos.


</details>
<details>
<summary>¬øFALTA UN RENTAL ID?</summary>
<br>

![susan](https://github.com/CharlyKill7/Database-Project/blob/main/images/rental_head.png)
<br>

Como se puede observar, la diferencia entre **id** y **rental_id** pasa de ser **+1** al principio a **+2** al final, por lo que se intuye que se han saltado un rental_id.
<br>
 
 Para obtener dicho **rental_id**:
```
print(list(ren.rental_id[ren.index==ren.rental_id -1])[-1])
```
 **320**
```
print(list(ren.rental_id[ren.index==ren.rental_id -2])[0])
```
 **322**
 <br>
 <br>
... por lo que sabemos que **falta el rental_id n¬∫ 321**


</details>

<br>

**¬øQu√© pel√≠culas tenemos?**


Explorando la tabla **INVENTORY** vimos que hab√≠a mil pel√≠culas inventariadas, y a trav√©s de **film_id** descubrimos que se correspond√≠an con las primeras **223** pel√≠culas de la tabla **FILMS**. En otras palabras, en nuestro inventario **s√≥lo hab√≠a pel√≠culas con t√≠tulos de la ‚ÄòA‚Äô a la ‚ÄòD‚Äô**. Esto nos hizo sospechar que tal vez la informaci√≥n estuviera incompleta.


Poco despu√©s, durante el an√°lisis de la tabla **RENTAL**, nos percatamos de que la columna **inventory_id** conten√≠a valores por encima de los mil de la tabla **INVENTORY** (hasta el **4581**). Es decir, en nuestro videoclub se hab√≠an estado alquilando pel√≠culas que no figuraban en inventario. As√≠ nos convencimos de que nuestra hip√≥tesis era correcta.


 <a name="database"/>
 
## üóÇÔ∏è Database

Nuestra intenci√≥n siempre fue simplificar, adem√°s de profesionalizar, el manejo del videoclub. Para ello, decidimos quedarnos con las tablas que solo fueran indispensables, a pesar de que todas ellas proporcionaban alguna informaci√≥n valiosa. A continuaci√≥n, detallamos el proceso de selecci√≥n para nuestra base de datos:


- La tabla **FILM** es, presumiblemente, el cat√°logo, y por tanto nos pareci√≥ interesante mantenerla √≠ntegra ya que supone el listado principal de pel√≠culas de nuestro videoclub.
- La tabla **OLD_HDD** conten√≠a informaci√≥n que relacionaba ciertos actores con ciertos largometrajes, la cual decidimos a√±adir a la tabla anterior para poder desechar √©sta.
- La tabla **LANGUAGE** prove√≠a datos sobre los posibles idiomas de las pel√≠culas, por lo que tambi√©n decidimos integrar esta informaci√≥n en Films, sustituyendo la columna num√©rica **language_id** por el idioma correspondiente.
- La tabla **CATEGORY** recibi√≥ el mismo tratamiento que la anterior, emplazando en una nueva columna de Film el g√©nero de cada pel√≠cula.
- La tabla **INVENTORY** proporcionaba informaci√≥n interesante, puesto que nos permit√≠a relacionar la cinta de v√≠deo f√≠sica con el t√≠tulo correspondiente.
- La tabla **RENTAL** fue sin duda una de las m√°s reveladoras, ya que nos permiti√≥ descubrir que hab√≠a un inventario faltante, adem√°s de se√±alarnos datos tan importantes para el negocio como identificadores por cliente o n√∫mero de d√≠as por alquiler.
- La tabla **CUSTOMER** no exist√≠a entre nuestros .csv, pero nos pareci√≥ conveniente incorporarla a la base de datos del futuro negocio.
- En la mayor√≠a de las tablas encontramos una columna llamada Last update que no ofrec√≠a datos relevantes, pues todos sus valores eran equivalentes para cada una de las tablas.

<br>

<img src="https://github.com/CharlyKill7/Database-Project/blob/main/images/EERD_inicial.png" width="550" height="400" />

<a name="transformaci√≥n"/>

## üß¨ Transformaci√≥n

<details>
<summary>INVENTORY_MASTER</summary>
<br>
 
```
SELECT inventory.inventory_id AS 'INVENTORY ID', film_id AS 'FILM ID', store_id AS 'STORE ID', 
		CASE
        WHEN rental_date IS NOT NULL AND return_date = '' AND rental.inventory_id IS NOT NULL THEN 'NOT AVAILABLE'
        ELSE 'AVAILABLE'
    END AS AVAILABILITY

FROM inventory

LEFT JOIN rental ON rental.inventory_id = inventory.inventory_id
; 
 ```
 
<details>
<summary>Si alquilamos la pel√≠cula cuyo id de inventario es 1...</summary>
<br>
 
```
 INSERT INTO rental (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id)
 
 VALUES (1002, '2005-05-31 00:55:00', 1, 588, '', 2);
  ```


</details>
 
![inventory_master](https://github.com/CharlyKill7/Database-Project/blob/main/images/inventory_master.png)

</details>

<details>
<summary>RENTAL_MASTER</summary>
<br>

```
SELECT rental_id AS RENTALS, rental_date AS 'RENTAL DATE', rental.inventory_id AS 'INVENTORY ID', customer_id AS 'CUSTOMER ID', 
	   return_date AS 'RETURN DATE', staff_id AS 'STAFF ID', title as TITLE, 
       (DATEDIFF(return_date, rental_date) + 1) AS DAYS,
       (rental_rate * (DATEDIFF(return_date, rental_date) + 1)) AS INCOME
       
FROM rental
LEFT JOIN inventory ON inventory.inventory_id = rental.inventory_id
LEFT JOIN films ON inventory.film_id = films.film_id
; 
 ```
![rental_master](https://github.com/CharlyKill7/Database-Project/blob/main/images/rental_master.png)
 
</details>

<details>
<summary>CUSTOMER_MASTER</summary>
<br>
 
 ```
SELECT customer.customer_id AS 'CUSTOMER ID', name AS 'NAME', lastname AS 'LAST NAME', telephone AS TELEPHONE, 
	   mail AS EMAIL, round(sum((rental_rate * (DATEDIFF(return_date, rental_date) + 1))), 2) AS 'TOTAL SPENT',
       GROUP_CONCAT(' ',title) AS 'FILMS RENTED'
       
FROM rental

LEFT JOIN inventory ON inventory.inventory_id = rental.inventory_id
LEFT JOIN films ON inventory.film_id = films.film_id
LEFT JOIN customer ON customer.customer_id = rental.customer_id

GROUP BY customer.customer_id, name , lastname, telephone, mail
;
 ```
![customer_master](https://github.com/CharlyKill7/Database-Project/blob/main/images/customer_master.png)

</details>


<a name="consultas"/>

## üìä BONUS: Consultas

<details>
<summary>LOS CLIENTES QUE M√ÅS ALQUILAN</summary>
<br>

 ```
SELECT  rental.customer_id, count(rental.customer_id) as Rentals
FROM rental
 
LEFT JOIN customer ON rental.customer_id = customer.customer_id
 
GROUP BY rental.customer_id
 
ORDER BY Rentals desc
LIMIT 5
 ```

![top_clientes_cantidad](https://github.com/CharlyKill7/Database-Project/blob/main/images/top_clientes_cantidad.PNG)
	
</details>

<details>
<summary>LOS CLIENTES QUE M√ÅS GASTAN</summary>
<br>

```
SELECT  `customer id`, round(sum(Income),2) as 'Total Spent'
FROM rental_master
 
GROUP BY `customer id`
 
ORDER BY 'Total Spent' desc
LIMIT 5 
 ```

![top_clientes_income2](https://github.com/CharlyKill7/Database-Project/blob/main/images/top_clientes_income2.PNG)

</details>

<details>
<summary>LAS PEL√çCULAS QUE M√ÅS SE ALQUILAN</summary>
<br>

```
SELECT  title, count(title) as Alquileres
FROM rental_master
 
GROUP BY title
 
ORDER BY Alquileres DESC
LIMIT 5
 ```

![top_pelis](https://github.com/CharlyKill7/Database-Project/blob/main/images/top_pelis.png)

</details>